/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership constraints. It ensures that users can only access and modify data they own or have been explicitly granted permission to access based on their role.
 *
 * @data_structure
 * - /branches/{branchId}: Stores branch information. Accessible to branch admins and super admins.
 * - /users/{userId}: Stores user information. Only the user and super admins can access user data.
 * - /students/{studentId}: Stores student information. Accessible to branch admins and super admins.
 * - /transactions/{transactionId}: Stores transaction data. Parents can create transactions, and branch admins/super admins can confirm or reject them.
 * - /parentCredentials/{userId}: Stores temporary parent credentials. Accessible only during creation and automatically deleted after a TTL.
 * - /attendance/{attendanceId}: Stores student attendance records. Accessible to teachers and admins.
 * - /subjects/{subjectId}: Stores subjects. Publicly readable, but only admins can create, update, or delete.
 * - /terms/{termId}: Stores terms. Publicly readable, but only admins can create, update, or delete.
 * - /results/{resultId}: Stores student results. Accessible to teachers for recording, and parents for viewing their children's results.
 * - /notifications/{notificationId}: Stores notifications for individual users. Only the target user can read their notifications.
 *
 * @key_security_decisions
 * - User listing is generally disallowed for privacy.
 * - Read-only collections (e.g., subjects, terms) are publicly readable.
 * - Strict ownership is enforced where applicable to prevent unauthorized data access.
 * - The default security posture is deny all unless explicitly allowed.
 *
 * @denormalization_for_authorization
 * - Many entities denormalize `branchId` to simplify branch-level queries and authorization checks.
 * - Transactions denormalize `studentName` and `parentUserId` to avoid extra reads.
 *
 * @structural_segregation
 * - No private/public segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to branch documents. Branch admins and super admins can manage branch data.
     * @path /branches/{branchId}
     * @allow (get, list) User with role 'branch_admin' or 'super_admin' can read branch details.
     * @allow (create, update, delete) User with role 'super_admin' can manage branch details.
     * @deny (create, update, delete) User with role 'parent' cannot modify branch details.
     * @principle Enforces role-based access control and prevents unauthorized modifications to branch data.
     */
    match /branches/{branchId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to user documents. Users can read their own data, and super admins can manage all user data.
     * @path /users/{userId}
     * @allow (get) User can read their own profile data.
     * @allow (create) User can create their own profile data, with matching user ID.
     * @deny (create, update, delete) User cannot modify other user profiles.
     * @principle Enforces user ownership for profile data and restricts modifications to super admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Grants access to student documents. Branch admins can manage student data within their branch. Super admins can manage all student data. Parents cannot directly access this.
     * @path /students/{studentId}
     * @allow (get, list) User with role 'branch_admin' or 'super_admin' can read student details.
     * @deny (create, update, delete) User with role 'parent' cannot modify student details.
     * @principle Enforces role-based access control and prevents unauthorized modifications to student data.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to transaction documents. Parents can create transactions, and branch admins/super admins can confirm or reject them.
     * @path /transactions/{transactionId}
     * @allow (create) Parent can create a transaction with their user ID.
     * @deny (update, delete) Only branch admins or super admins can modify/delete transactions.
     * @principle Restricts transaction creation to parents and modifications to admins, preventing unauthorized changes.
     */
    match /transactions/{transactionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants access to temporary parent credential documents. Only accessible during creation and automatically deleted after a TTL.
     * @path /parentCredentials/{userId}
     * @allow (create) Allows creation of parent credentials.
     * @deny (get, list, update, delete) Prevents any other operations on parent credentials.
     * @principle Limits access to parent credentials to creation only and ensures automatic deletion.
     */
    match /parentCredentials/{userId} {
      allow get, list, update, delete: if false;
      allow create: if true;
    }

    /**
     * @description Grants access to attendance documents. Teachers and branch admins can manage attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get, list) Allows teachers and admins to read attendance records.
     * @deny (create, update, delete) Restricts attendance management to authorized users.
     * @principle Enforces role-based access control for attendance management.
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to subject documents. Subjects are publicly readable, but only admins can create, update, or delete.
     * @path /subjects/{subjectId}
     * @allow (get, list) Allows anyone to read subject details.
     * @deny (create, update, delete) Restricts subject management to super admins.
     * @principle Allows public read access for subjects and restricts modifications to admins.
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to term documents. Terms are publicly readable, but only admins can create, update, or delete.
     * @path /terms/{termId}
     * @allow (get, list) Allows anyone to read term details.
     * @deny (create, update, delete) Restricts term management to super admins.
     * @principle Allows public read access for terms and restricts modifications to admins.
     */
    match /terms/{termId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to result documents. Teachers can record results, and parents can view results for their children.
     * @path /results/{resultId}
     * @allow (create, update) Allows teachers to record/update results.
     * @deny (delete) Prevents unauthorized deletion of results.
     * @principle Controls access to result data based on user role and student ownership.
     */
    match /results/{resultId} {
      allow get, list: if isSignedIn();
      allow create, update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to notification documents. Only the target user can read their notifications.
     * @path /notifications/{notificationId}
     * @allow (get) Allows a user to read their own notifications.
     * @deny (create, update, delete, list) Prevents any other operations on notifications.
     * @principle Enforces user ownership for notifications and restricts access to authorized users.
     */
    match /notifications/{notificationId} {
      allow get: if resource.data.userId == request.auth.uid;
      allow list, create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}