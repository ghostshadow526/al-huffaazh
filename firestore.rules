/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a school management system.
 * Data is organized into top-level collections for branches, users, students, transactions, parent credentials, attendance, subjects, terms, results, and notifications.
 *
 * Core Philosophy:
 *  - Strict authorization based on user roles (teacher, parent, branch_admin, super_admin).
 *  - Data ownership enforced where applicable (e.g., users can only manage their own profiles).
 *  - Read-only access for public data (e.g., branches, subjects, terms).
 *  - Denormalization of branchId in several collections to enable efficient branch-specific queries and authorization.
 *
 * Data Structure:
 *  - /branches/{branchId}: Stores branch information.
 *  - /users/{userId}: Stores user information, including roles and branch affiliations.
 *  - /students/{studentId}: Stores student information, with denormalized branchId and parentUserId.
 *  - /transactions/{transactionId}: Stores transaction records, with denormalized studentId, parentUserId, and branchId.
 *  - /parentCredentials/{userId}: Stores temporary parent credentials with TTL.
 *  - /attendance/{attendanceId}: Stores student attendance records, with denormalized studentId, branchId, and admissionNo.
 *  - /subjects/{subjectId}: Stores subject information.
 *  - /terms/{termId}: Stores term information.
 *  - /results/{resultId}: Stores student results, with denormalized studentName, termName, and subjectName.
 *  - /notifications/{notificationId}: Stores notifications for users.
 *
 * Key Security Decisions:
 *  - Users can only read their own user document.
 *  - Listing of users is disallowed to prevent information leakage.
 *  - Transactions can only be created by parents for their children, and confirmed/rejected by branch admins.
 *  - Parent credentials are automatically deleted after a certain period using TTL.
 *  - Only teachers can mark attendance.
 *  - Student details can only be created by branch admins or super admins of the branch the Student belongs to.
 *
 * Denormalization for Authorization:
 *  - The `transactions` collection denormalizes `studentId`, `parentUserId`, and `branchId` to allow security rules to efficiently verify that a parent is creating a transaction for their child within the correct branch.
 *  - The `attendance` collection denormalizes `studentId`, `branchId`, and `admissionNo` to allow efficient branch-level queries and authorization.
 *  - The `results` collection denormalizes `studentName`, `termName`, and `subjectName` for efficient branch-level queries and authorization.
 *  - The `students` collection denormalizes `branchId` and `parentUserId` to allow efficient branch-level queries and authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages branch information.
     * @path /branches/{branchId}
     * @allow (get, list): Anyone can read branch information.
     * @allow (create, update, delete): No one can create, update, or delete branches in this prototype.
     * @deny (create, update, delete): No one can create, update, or delete branches in this prototype.
     * @principle Public read, no writes allowed in this prototype.
     */
    match /branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user information.
     * @path /users/{userId}
     * @allow get: Users can only read their own profile.
     * @allow create: Users can create their own profile with matching user ID.
     * @allow update: Users can update their own profile.
     * @allow delete: No one can delete user profiles in this prototype.
     * @deny list: Listing users is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages student information.
     * @path /students/{studentId}
     * @allow get, list: Anyone can read or list student information.
     * @allow create, update, delete: No one can create, update, or delete student information in this prototype.
     * @deny create, update, delete: No one can create, update, or delete student information in this prototype.
     * @principle Public read, owner-only writes.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages transaction records.
     * @path /transactions/{transactionId}
     * @allow get, list: Anyone can read or list transaction records.
     * @allow create, update, delete: No one can create, update, or delete transaction records in this prototype.
     * @deny create, update, delete: No one can create, update, or delete transaction records in this prototype.
     * @principle Public read, owner-only writes.
     */
    match /transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages temporary parent credentials.
     * @path /parentCredentials/{userId}
     * @allow get, list: No one can get or list parent credentials.
     * @allow create, update, delete: No one can create, update, or delete parent credentials in this prototype.
     * @deny get, list, create, update, delete: No one can get, list, create, update, or delete parent credentials.
     */
    match /parentCredentials/{userId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages student attendance records.
     * @path /attendance/{attendanceId}
     * @allow get, list: Anyone can read or list attendance records.
     * @allow create, update, delete: No one can create, update, or delete attendance records in this prototype.
     * @deny create, update, delete: No one can create, update, or delete attendance records in this prototype.
     * @principle Public read, owner-only writes.
     */
    match /attendance/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages subject information.
     * @path /subjects/{subjectId}
     * @allow get, list: Anyone can read or list subjects.
     * @allow create, update, delete: No one can create, update, or delete subjects in this prototype.
     * @deny create, update, delete: No one can create, update, or delete subjects in this prototype.
     * @principle Public read, no writes allowed in this prototype.
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages term information.
     * @path /terms/{termId}
     * @allow get, list: Anyone can read or list terms.
     * @allow create, update, delete: No one can create, update, or delete terms in this prototype.
     * @deny create, update, delete: No one can create, update, or delete terms in this prototype.
     * @principle Public read, no writes allowed in this prototype.
     */
    match /terms/{termId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages student results.
     * @path /results/{resultId}
     * @allow get, list: Anyone can read or list results.
     * @allow create, update, delete: No one can create, update, or delete results in this prototype.
     * @deny create, update, delete: No one can create, update, or delete results in this prototype.
     * @principle Public read, owner-only writes.
     */
    match /results/{resultId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user notifications.
     * @path /notifications/{notificationId}
     * @allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
     * @allow list: if isSignedIn(); // Assuming notifications are private, only signed-in users can list.
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwner(resource.data.userId); //Immutability not enforced.
     * @allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
     * @deny: if !isSignedIn();
     * @principle Enforces user-ownership for notification data.
     */
    match /notifications/{notificationId} {
        allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}