/**
 * @fileoverview Firestore Security Rules for the school management application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict access controls based on user roles and resource relationships.
 *
 * Data Structure:
 * - /branches/{branchId}: Stores branch-specific data, accessible to branch admins and super admins.
 * - /users/{userId}: Stores user profiles with role-based access control. Super admins can manage all users, while branch admins can manage users within their branch. Parents and teachers have limited access.
 * - /students/{studentId}: Stores student data, accessible to branch admins, teachers within the student's branch, and parents of the student.
 * - /receipts/{receiptId}: Stores payment receipts, accessible to parents who uploaded them and branch admins for verification.
 * - /parentCredentials/{userId}: Stores temporary parent credentials with TTL-based deletion. Only accessible during creation.
 * - /attendance/{attendanceId}: Stores student attendance records, accessible to teachers within the student's branch.
 * - /subjects/{subjectId}: Stores a list of subjects, publicly readable.
 * - /terms/{termId}: Stores school terms, publicly readable.
 * - /results/{resultId}: Stores student results, accessible to teachers and parents.
 * - /notifications/{notificationId}: Stores notifications, accessible to the user the notification is for.
 * - /gallery/{imageId}: Stores gallery images, publicly readable.
 *
 * Key Security Decisions:
 * - Public Read-Only Collections: The /subjects and /terms collections are publicly readable.
 * - Ownership Enforcement: Write operations are generally restricted to resource owners or authorized roles.
 * - No User Listing: Listing all users is generally disallowed for security reasons.
 * - Denormalization: The ruleset relies on denormalized data (e.g., branchId on students and receipts) to avoid complex queries in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows branch admins and super admins to manage branch information.
     * @path /branches/{branchId}
     */
    match /branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && request.auth.token.branchId == branchId));
    }

    /**
     * @description Allows super admins to manage all users and branch admins to manage users within their branch. Parents and teachers can only access their own user document.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin() || (isBranchAdmin() && get(/databases/$(database)/documents/users/$(userId)).data.branchId == request.auth.token.branchId));
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && get(/databases/$(database)/documents/users/$(userId)).data.branchId == request.auth.token.branchId));
    }

    /**
     * @description Allows branch admins and teachers within the student's branch to read student data. Allows parents of the student to read and update (certain fields only) student data. Allows super admins to manage all student data.
     * @path /students/{studentId}
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && get(/databases/$(database)/documents/students/$(studentId)).data.branchId == request.auth.token.branchId) || (isTeacher() && request.auth.token.branchId == get(/databases/$(database)/documents/students/$(studentId)).data.branchId) || isParentOfStudent(studentId));
      allow create: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && request.resource.data.branchId == request.auth.token.branchId));
      allow update, delete: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && get(/databases/$(database)/documents/students/$(studentId)).data.branchId == request.auth.token.branchId));
    }

    /**
     * @description Allows parents who uploaded the receipt and branch admins to access receipt data. Parents can only create receipts for their children. Branch admins can update the status and verifiedBy fields.
     * @path /receipts/{receiptId}
     */
    match /receipts/{receiptId} {
      allow get, list: if isSignedIn() && (isParentOfReceipt(receiptId) || (isBranchAdmin() && get(/databases/$(database)/documents/receipts/$(receiptId)).data.branchId == request.auth.token.branchId) || isSuperAdmin());
      allow create: if isSignedIn() && isParentOfStudent(request.resource.data.studentId);
      allow update: if isSignedIn() && (isSuperAdmin() || (isBranchAdmin() && get(/databases/$(database)/documents/receipts/$(receiptId)).data.branchId == request.auth.token.branchId));
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Allows creation of temporary parent credentials. These are meant to be short-lived and automatically deleted via TTL. No other access is allowed.
     * @path /parentCredentials/{userId}
     */
    match /parentCredentials/{userId} {
      allow get, list, update, delete: if false;
      allow create: if true; // limited window for creating temporary user
    }

    /**
     * @description Allows teachers within the student's branch to manage attendance records.
     * @path /attendance/{attendanceId}
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn() && ((isTeacher() && request.auth.token.branchId == get(/databases/$(database)/documents/attendance/$(attendanceId)).data.branchId) || isSuperAdmin());
      allow create, update: if isSignedIn() && ((isTeacher() && request.auth.token.branchId == request.resource.data.branchId) || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Allows anyone to read the list of subjects. Write operations are not allowed.
     * @path /subjects/{subjectId}
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the list of terms. Write operations are not allowed.
     * @path /terms/{termId}
     */
    match /terms/{termId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows teachers who recorded the result and parents of the student to access result data. Super Admins can access all results.
     * @path /results/{resultId}
     */
    match /results/{resultId} {
      allow get, list: if isSignedIn() && (isOwnerOfResult(resultId) || isParentOfStudentInResult(resultId) || isSuperAdmin());
      allow create: if isSignedIn() && (isTeacher() && request.resource.data.recordedBy == request.auth.uid || isSuperAdmin());
      allow update: if isSignedIn() && (isOwnerOfResult(resultId) || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Allows a user to only access their own notifications.
     * @path /notifications/{notificationId}
     */
    match /notifications/{notificationId} {
      allow get, list: if isSignedIn() && isNotificationForUser(notificationId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isNotificationForUser(notificationId);
      allow delete: if isSignedIn() && isNotificationForUser(notificationId);
    }

    /**
     * @description Allows anyone to read the gallery images. Write operations are not allowed.
     * @path /gallery/{imageId}
     */
    match /gallery/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // --- Helper Functions ---

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isSuperAdmin() {
    return isSignedIn() && request.auth.token.role == 'super_admin';
  }

  function isBranchAdmin() {
    return isSignedIn() && request.auth.token.role == 'branch_admin';
  }

  function isTeacher() {
        return isSignedIn() && request.auth.token.role == 'teacher';
  }

  function isParentOfStudent(studentId) {
    return isSignedIn() && get(/databases/$(database)/documents/students/$(studentId)).data.parentUserId == request.auth.uid;
  }

  function isParentOfReceipt(receiptId) {
      return isSignedIn() && get(/databases/$(database)/documents/receipts/$(receiptId)).data.parentUserId == request.auth.uid;
  }

  function isParentOfStudentInResult(resultId) {
     return isSignedIn() && get(/databases/$(database)/documents/results/$(resultId)).data.studentId != null && get(/databases/$(database)/documents/students/$(get(/databases/$(database)/documents/results/$(resultId)).data.studentId)).data.parentUserId == request.auth.uid;
  }

    function isOwnerOfResult(resultId) {
    return isSignedIn() && get(/databases/$(database)/documents/results/$(resultId)).data.recordedBy == request.auth.uid;
  }

  function isNotificationForUser(notificationId) {
    return isSignedIn() && get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid;
  }
}