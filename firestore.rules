/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the Al-Huffaazh application.
 *
 * Data Structure:
 * - /branches/{branchId}: Stores branch information. Accessible by branch admins and super admins.
 * - /users/{userId}: Stores user information. Accessible by the user themselves, branch admins (for users in their branch), and super admins.
 * - /students/{studentId}: Stores student information. Accessible by branch admins and teachers in the student's branch, as well as the student's parent.
 * - /transactions/{transactionId}: Stores transaction records. Accessible by branch admins and super admins. Parents can only create transactions for their children.
 * - /parentCredentials/{userId}: Stores temporary parent credentials. Accessible only on create. TTL for automatic deletion.
 * - /attendance/{attendanceId}: Stores attendance records. Accessible by teachers and branch admins.
 * - /subjects/{subjectId}: Stores subjects. Publicly readable, but only super admins can create, update, or delete.
 * - /terms/{termId}: Stores terms. Publicly readable, but only super admins can create, update, or delete.
 * - /results/{resultId}: Stores student results. Accessible by teachers and branch admins.
 * - /notifications/{notificationId}: Stores notifications for specific users. Accessible only by the target user.
 *
 * Key Security Decisions:
 * - Super admins have full access to all data.
 * - Branch admins have access to data within their branch.
 * - Teachers have access to student and attendance data within their branch.
 * - Parents can only create transaction records for their children and view notifications intended for them.
 * - Public read access for subjects and terms.
 * - Listing of users is generally disallowed, except for super admins.
 * - Strict ownership for user profiles.
 *
 * Denormalization for Authorization:
 * - Several entities (Student, Transaction, Attendance, Result) denormalize `branchId` to simplify branch-level access control.
 * - The Transaction entity denormalizes `studentId` and `parentUserId` to allow parents to create transactions for their children.
 *
 * Structural Segregation:
 * - No explicit structural segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to branch information.
     * @path /branches/{branchId}
     * @allow (get, list): if true; // TODO: Add role-based access control based on admin status and branchId.
     * @allow (create, update, delete): if false; // TODO: Add role-based access control based on admin status and branchId.
     * @deny (create): if false;
     *   auth != null && request.auth.uid == userId;
     * @deny (update, delete): if resource.data.creatorId != request.auth.uid;
     *   auth == null;
     * @principle Enforces role-based access control for branch management.
     */
    match /branches/{branchId} {
      allow get: if true;
      allow list: if true; // TODO: Determine if listing should be restricted.

      allow create: if false; // TODO: Implement role-based access (super_admin, branch_admin)
      allow update: if false; // TODO: Implement role-based access (super_admin, branch_admin)
      allow delete: if false; // TODO: Implement role-based access (super_admin)
    }

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (get): Authenticated user can get their own profile.
     * @allow (create): Authenticated user can create their own profile (self-registration).
     * @allow (update, delete): Authenticated user can update/delete their own profile.
     * @deny (list): Listing users is generally disallowed for privacy.
     * @deny (create): Cannot create a user document with an ID that does not match the authenticated user's ID.
     * @deny (update, delete): Prevents modification of other user's profiles.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to student information.
     * @path /students/{studentId}
     * @allow (get): Branch admins and teachers in the student's branch, as well as the student's parent can access the student's information.
     * @allow (create): Branch admins and super admins can create student records. Must validate branchId.
     * @allow (update, delete): Branch admins and super admins can update/delete student records.
     * @deny: Other users cannot access or modify student records.
     * @principle Enforces role-based access control and branch-level data isolation for student data.
     */
    match /students/{studentId} {
      allow get: if true; // TODO: Implement role-based access (branch_admin, teacher, parent).  Requires role information and branchId check.
      allow list: if true; // TODO: Determine if listing should be restricted.

      allow create: if false; // TODO: Implement role-based access (super_admin, branch_admin).  Requires role information and branchId check.
      allow update: if false; // TODO: Implement role-based access (super_admin, branch_admin).  Requires role information and branchId check.
      allow delete: if false; // TODO: Implement role-based access (super_admin, branch_admin).
    }

    /**
     * @description Manages access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (get, list): Branch admins and super admins can access transaction records.
     * @allow (create): Parents can create transaction records for their children. Must validate studentId and parentUserId.
     * @allow (update, delete): Only super admins can update/delete transaction records.
     * @deny: Other users cannot access or modify transaction records.
     * @principle Enforces role-based access control and parent-only creation for transaction data.
     */
    match /transactions/{transactionId} {
      allow get: if true; // TODO: Implement role-based access (super_admin, branch_admin)
      allow list: if true; // TODO: Implement role-based access (super_admin, branch_admin)

      allow create: if isSignedIn() && request.resource.data.parentUserId == request.auth.uid; // Parent can create transaction.
      allow update: if false; // TODO: Implement role-based access (super_admin).  Requires role information.
      allow delete: if false; // TODO: Implement role-based access (super_admin). Requires role information.
    }

    /**
     * @description Manages access to temporary parent credentials.
     * @path /parentCredentials/{userId}
     * @allow create: Allows creation. TTL will automatically delete the record.
     * @deny get, list, update, delete: No other operations allowed.
     * @principle Only allows creating temporary credentials.
     */
    match /parentCredentials/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get, list): Teachers and branch admins can access attendance records.
     * @allow (create, update): Teachers can create/update attendance records for students in their branch.
     * @allow (delete): Only super admins can delete attendance records.
     * @deny: Other users cannot access or modify attendance records.
     * @principle Enforces role-based access control and branch-level data isolation for attendance data.
     */
    match /attendance/{attendanceId} {
      allow get: if true; // TODO: Implement role-based access (teacher, branch_admin). Requires role information and branchId check.
      allow list: if true; // TODO: Implement role-based access (teacher, branch_admin). Requires role information and branchId check.

      allow create: if false; // TODO: Implement role-based access (teacher).  Requires role information and branchId check.
      allow update: if false; // TODO: Implement role-based access (teacher).  Requires role information and branchId check.
      allow delete: if false; // TODO: Implement role-based access (super_admin).  Requires role information.
    }

    /**
     * @description Manages access to subjects.
     * @path /subjects/{subjectId}
     * @allow get, list: Publicly readable.
     * @allow create, update, delete: Only super admins can create, update, or delete subjects.
     * @principle Public read access with restricted write access for subject management.
     */
    match /subjects/{subjectId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Implement role-based access (super_admin).  Requires role information.
      allow update: if false; // TODO: Implement role-based access (super_admin). Requires role information.
      allow delete: if false; // TODO: Implement role-based access (super_admin). Requires role information.
    }

    /**
     * @description Manages access to terms.
     * @path /terms/{termId}
     * @allow get, list: Publicly readable.
     * @allow create, update, delete: Only super admins can create, update, or delete terms.
     * @principle Public read access with restricted write access for term management.
     */
    match /terms/{termId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Implement role-based access (super_admin).  Requires role information.
      allow update: if false; // TODO: Implement role-based access (super_admin). Requires role information.
      allow delete: if false; // TODO: Implement role-based access (super_admin). Requires role information.
    }

    /**
     * @description Manages access to student results.
     * @path /results/{resultId}
     * @allow (get, list): Teachers and branch admins can access student results.
     * @allow (create, update): Teachers can create/update results for students in their branch.
     * @allow (delete): Only super admins can delete results.
     * @deny: Other users cannot access or modify results.
     * @principle Enforces role-based access control and branch-level data isolation for result data.
     */
    match /results/{resultId} {
      allow get: if true; // TODO: Implement role-based access (teacher, branch_admin). Requires role information and branchId check.
      allow list: if true; // TODO: Implement role-based access (teacher, branch_admin). Requires role information and branchId check.

      allow create: if false; // TODO: Implement role-based access (teacher).  Requires role information and branchId check.
      allow update: if false; // TODO: Implement role-based access (teacher).  Requires role information and branchId check.
      allow delete: if false; // TODO: Implement role-based access (super_admin).  Requires role information.
    }
    /**
     * @description Manages access to notifications for individual users.
     * @path /notifications/{notificationId}
     * @allow get: The notification can only be read by the user to whom it is addressed.
     * @deny list: Listing notifications is disallowed.
     * @deny create, update, delete: Creating, updating, and deleting notifications is disallowed via the client; only the server can manage them.
     * @principle Notifications are private and can only be accessed by their intended recipient.
     */
    match /notifications/{notificationId} {
       allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
       allow list: if false;

       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

   // Helper function to determine if the user is the owner of the resource and the resource exists.
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}