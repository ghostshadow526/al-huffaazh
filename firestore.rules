/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with varying levels of access.
 *
 * Data Structure:
 * - /branches/{branchId}: Stores branch information. Publicly readable.
 * - /users/{userId}: Stores user information. Owner-only read/write access.
 * - /students/{studentId}: Stores student information. Publicly readable.
 * - /transactions/{transactionId}: Stores transaction records. Publicly readable.
 * - /parentCredentials/{userId}: Stores temporary parent credentials. Owner-only access, TTL-based deletion handled by backend.
 * - /attendance/{attendanceId}: Stores student attendance records. Publicly readable.
 * - /subjects/{subjectId}: Stores subject information. Publicly readable.
 * - /terms/{termId}: Stores term information. Publicly readable.
 * - /results/{resultId}: Stores student results. Publicly readable.
 * - /notifications/{notificationId}: Stores notifications for users. Owner-only access.
 *
 * Key Security Decisions:
 * - Public Read Access: The `branches`, `students`, `transactions`, `subjects`, `terms`, and `results` collections are publicly readable, assuming appropriate data exposure considerations are handled in the application.
 * - Owner-Only Write Access: The `users` and `notifications` collections are strictly owner-only for write operations.
 * - Self-Creation: Users can create their own user document, which is essential for account creation.
 * - Denormalization:  The `Student` and `Transaction` entities denormalize `branchId` to simplify branch-level queries and enforce security at the branch level if needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to branch information.
     * @path /branches/{branchId}
     * @allow (get, list) Any user can read branch information.
     * @deny (create, update, delete) No user can create, update, or delete branch information through the client.
     * @principle Publicly readable data.
     */
    match /branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access for user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) Authenticated user can read their own profile if the userId matches their auth.uid.
     * @allow (update, delete) Authenticated user can update/delete their own profile if the userId matches their auth.uid.
     * @deny (create, update, delete) If the userId does not match auth.uid.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to student information.
     * @path /students/{studentId}
     * @allow (get, list) Any user can read student information.
     * @deny (create, update, delete) No user can create, update, or delete student information through the client.
     * @principle Publicly readable data.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (get, list) Any user can read transaction records.
     * @deny (create, update, delete) No user can create, update, or delete transaction records through the client.
     * @principle Publicly readable data.
     */
    match /transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to temporary parent credentials to the owner only.
     * @path /parentCredentials/{userId}
     * @allow (create) Authenticated user can create their own parent credential if the userId matches their auth.uid.
     * @allow (get, list) Authenticated user can read their own parent credential if the userId matches their auth.uid.
     * @allow (update, delete) Authenticated user can update/delete their own parent credential if the userId matches their auth.uid.
     * @deny (create, update, delete) If the userId does not match auth.uid.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /parentCredentials/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get, list) Any user can read attendance records.
     * @deny (create, update, delete) No user can create, update, or delete attendance records through the client.
     * @principle Publicly readable data.
     */
    match /attendance/{attendanceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to subject information.
     * @path /subjects/{subjectId}
     * @allow (get, list) Any user can read subject information.
     * @deny (create, update, delete) No user can create, update, or delete subject information through the client.
     * @principle Publicly readable data.
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to term information.
     * @path /terms/{termId}
     * @allow (get, list) Any user can read term information.
     * @deny (create, update, delete) No user can create, update, or delete term information through the client.
     * @principle Publicly readable data.
     */
    match /terms/{termId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to result information.
     * @path /results/{resultId}
     * @allow (get, list) Any user can read result information.
     * @deny (create, update, delete) No user can create, update, or delete result information through the client.
     * @principle Publicly readable data.
     */
    match /results/{resultId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
    * @description Enforces owner-only access for user notifications. Users can only read and write their own notifications.
    * @path /notifications/{notificationId}
    * @allow (create) Authenticated user can create a notification if the userId matches their auth.uid.
    * @allow (get, list) Authenticated user can read notifications if the userId matches their auth.uid.
    * @allow (update, delete) Authenticated user can update/delete notifications if the userId matches their auth.uid and document exists.
    * @deny (create, update, delete) If the userId does not match auth.uid.
    * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
    */
    match /notifications/{notificationId} {
      allow get, list: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}