/**
 * @description This ruleset provides basic authorization for a school management system.
 *   It enforces ownership for user profiles and allows public read access to branches,
 *   while restricting student and payment data access to authorized users only.
 * @dataStructure
 *   /branches/{branchId} - Stores branch information (publicly readable).
 *   /users/{userId} - Stores user information (owner-only access).
 *   /students/{studentId} - Stores student information (owner-only access).
 *   /payments/{paymentId} - Stores payment information (owner-only access).
 * @keySecurityDecisions
 *   - Users can only read/write their own user document.
 *   - Branches are publicly readable to allow listing of all branches. Writes are disabled in prototype.
 *   - Listing of users, students, and payments is not allowed. Only individual reads are allowed with correct authentication.
 *   - Data validation is minimal in this prototyping phase.
 * @denormalizationForAuthorization
 *   - The `Payment` entity includes `studentId`, `parentUserId`, and `branchId` to simplify authorization checks and prevent the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to branch information, but restricts writes.
     * @path /branches/{branchId}
     * @allow (get, list): Any user can read branch information.
     * @deny (create, update, delete): No one can create, update, or delete branch information.
     * @principle Allows public read access for listing branches
     */
    match /branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the user with the matching userId can read, create, update, or delete their profile.
     * @deny (get, create, update, delete): Any other user attempting to access this profile will be denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isCreatingOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isUserIdImmutableOnUpdate(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts student data access to authorized users only.
     * @path /students/{studentId}
     * @allow (get, create, update, delete): Only the owner user can read, create, update, or delete student information.
     * @deny (get, create, update, delete): Any other user attempting to access this student will be denied.
     *
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts payment data access to authorized users only.
     * @path /payments/{paymentId}
     * @allow (get, create, update, delete): Only the owner user can read, create, update, or delete payment information.
     * @deny (get, create, update, delete): Any other user attempting to access this payment will be denied.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCreatingOwner(userId) {
        return request.auth.uid == userId && request.resource.data.id == userId;
    }

    function isExistingOwner(userId) {
      return request.auth.uid == userId && resource.data.id == userId;
    }

    function isUserIdImmutableOnUpdate(userId) {
        return request.resource.data.id == resource.data.id;
    }
  }
}