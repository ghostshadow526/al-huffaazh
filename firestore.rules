/**
 * @fileOverview Firestore Security Rules for the school management application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a combination of role-based access control (RBAC) and
 * ownership-based access control to protect data.  Data validation is relaxed
 * in the prototype to facilitate rapid iteration.
 *
 * Data Structure:
 * - /branches/{branchId}: Stores branch information. Accessible to branch admins and super admins.
 * - /users/{userId}: Stores user information. Accessible only to the user and super admins.
 * - /students/{studentId}: Stores student information. Accessible to branch admins, teachers within the student's branch, and the student's parents.
 * - /transactions/{transactionId}: Stores transaction records. Accessible to branch admins, super admins, and the associated parent.
 * - /parentCredentials/{userId}: Stores temporary parent credentials. Only accessible for creation, then intended for deletion via TTL.
 * - /attendance/{attendanceId}: Stores student attendance records. Accessible to teachers and branch admins.
 * - /subjects/{subjectId}: Stores subjects. Publicly readable but only modifiable by super admins.
 * - /terms/{termId}: Stores terms. Publicly readable but only modifiable by super admins.
 * - /results/{resultId}: Stores student results. Accessible to teachers, branch admins, and the student's parents.
 * - /notifications/{notificationId}: Stores notifications for users. Accessible only to the intended user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information disclosure.
 * - Read-only collections (subjects, terms) are publicly readable.
 * - Ambiguous relationships default to strict owner-only access.
 * - Super admins have privileged access to manage data.
 *
 * Denormalization for Authorization:
 *  - Transactions denormalize studentId, parentUserId, and branchId for simpler security rules.
 *  - Students denormalize branchId to allow branch-level queries and security.
 *  - Attendance records denormalize studentName, admissionNo, and branchId for efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects branch information. Allows branch admins and super admins to manage branches.
     * @path /branches/{branchId}
     * @allow (create) User with role 'branch_admin' or 'super_admin'.
     * @deny (create) User with role 'teacher' or 'parent'.
     * @principle Enforces role-based access control, restricting branch creation to authorized roles.
     */
    match /branches/{branchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow update: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Protects user information.  Users can only manage their own profile, and super admins can manage all users.
     * @path /users/{userId}
     * @allow (get) Signed-in user accessing their own profile or a super admin.
     * @deny (get) Signed-in user accessing another user's profile.
     * @principle Enforces user-ownership for profile access and restricts access to super admins.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Protects student information. Branch admins and teachers within the student's branch can read student details. Parents can only read information about their own children.
     * @path /students/{studentId}
     * @allow (get) Branch admin, teacher within the student's branch, or parent of the student.
     * @deny (get) User from another branch trying to access student data.
     * @principle Restricts student data access to authorized personnel and related parties.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() && (isBranchAdmin() || isTeacher() || (isParent() && isParentOfStudent(resource.data.parentUserId)));
      allow list: if isSignedIn() && (isBranchAdmin() || isTeacher());
      allow create: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow update: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Protects transaction information.  Branch admins, super admins, and the associated parent can access transaction records.
     * @path /transactions/{transactionId}
     * @allow (get) Branch admin, super admin, or the parent associated with the transaction.
     * @deny (get) Unauthorized users attempting to access transaction records.
     * @principle Restricts transaction data access to authorized personnel and related parties.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && (isBranchAdmin() || isSuperAdmin() || (isParent() && isOwner(resource.data.parentUserId)));
      allow list: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow create: if isSignedIn() && (isParent() && isOwner(request.resource.data.parentUserId));
      allow update: if isSignedIn() && (isBranchAdmin() || isSuperAdmin());
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Protects temporary parent credentials. Only allows creation and restricts access.
     * @path /parentCredentials/{userId}
     * @allow (create) Any signed-in user, with the assumption that a backend process manages these.
     * @deny (get) Attempts to read parent credentials.
     * @principle Protects sensitive parent credentials and assumes a backend process manages them.
     */
    match /parentCredentials/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects student attendance records. Allows teachers and branch admins to manage attendance.
     * @path /attendance/{attendanceId}
     * @allow (get) Teacher or branch admin.
     * @deny (get) User without the necessary permissions.
     * @principle Restricts attendance data access to authorized personnel.
     */
    match /attendance/{attendanceId} {
      allow get: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow list: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow create: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow update: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow delete: if isSignedIn() && (isTeacher() || isBranchAdmin());
    }

    /**
     * @description Stores all available subjects. Publicly readable, only modifiable by super admins.
     * @path /subjects/{subjectId}
     * @allow (get, list) Public access.
     * @deny (create, update, delete) Non-super admins.
     * @principle Public read, restricted write access.
     */
    match /subjects/{subjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Stores all school terms. Publicly readable, only modifiable by super admins.
     * @path /terms/{termId}
     * @allow (get, list) Public access.
     * @deny (create, update, delete) Non-super admins.
     * @principle Public read, restricted write access.
     */
    match /terms/{termId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Protects student results. Allows teachers, branch admins, and parents to access results.
     * @path /results/{resultId}
     * @allow (get) Teacher, branch admin, or parent of the student.
     * @deny (get) Unauthorized users.
     * @principle Restricts result data access to authorized personnel and related parties.
     */
    match /results/{resultId} {
      allow get: if isSignedIn() && (isTeacher() || isBranchAdmin() || (isParent() && isParentOfStudentByResult(resource.data.studentId)));
      allow list: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow create: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow update: if isSignedIn() && (isTeacher() || isBranchAdmin());
      allow delete: if isSignedIn() && (isTeacher() || isBranchAdmin());
    }

    /**
     * @description Protects notifications. Only allows access to the intended user.
     * @path /notifications/{notificationId}
     * @allow (get) The user to whom the notification is addressed.
     * @deny (get) Access from any other user.
     * @principle Ensures private notifications.
     */
    match /notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isBranchAdmin() {
      return request.auth.token.role == 'branch_admin';
    }

    function isSuperAdmin() {
      return request.auth.token.role == 'super_admin';
    }

    function isTeacher() {
      return request.auth.token.role == 'teacher';
    }

     function isParent() {
      return request.auth.token.role == 'parent';
    }

    function isParentOfStudent(parentUserId) {
        return request.auth.uid == parentUserId;
    }
     function isParentOfStudentByResult(studentId) {
      return get(/databases/$(database)/documents/students/$(studentId)).data.parentUserId == request.auth.uid;
    }
  }
}