/**
 * @description This ruleset enforces a hybrid access model for receipts, allowing parents to create receipts,
 *              view their own receipts, and allowing a super admin to read and update all receipts.
 *              Users can only access their own data in their respective collections.
 * @dataStructure
 *  - /branches/{branchId}: Stores branch information.
 *  - /users/{userId}: Stores user information.
 *  - /students/{studentId}: Stores student information.
 *  - /receipts/{receiptId}: Stores receipt information. Parents can create receipts, and admins can read/update all.
 *  - /parentCredentials/{userId}: Stores temporary parent credentials.
 *  - /attendance/{attendanceId}: Stores attendance records.
 *  - /subjects/{subjectId}: Stores subject information.
 *  - /terms/{termId}: Stores term information.
 *  - /results/{resultId}: Stores student results.
 *  - /notifications/{notificationId}: Stores notifications for users.
 * @keySecurityDecisions
 *  - Super admins are identified by their email address.
 *  - Parents can only create receipts.
 *  - Listing of receipts is restricted to super admins.
 *  - Data validation is limited to authorization-critical fields.
 * @denormalizationForAuthorization
 *  - Receipts store parentUserId to easily check ownership.
 *  - Receipts store branchId for querying.
 * @structuralSegregation None applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages branch information. Only authenticated users can read. Write access is not granted.
     * @path /branches/{branchId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Only authenticated users can read branch information.
     */
    match /branches/{branchId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user information. Users can read their own profile, but listing all users is not allowed.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @deny list, update, delete: if false;
     * @principle Enforces user-ownership for profile reads and denies listing all users.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow list, update, delete: if false;
    }

    /**
     * @description Manages student information. Read access is allowed to all authenticated users. Writes are not allowed.
     * @path /students/{studentId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if false;
     * @principle Allows public read access to student information but restricts write access.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages receipts. Parents can create receipts, view their own receipts, and super admins can read/update all.
     * @path /receipts/{receiptId}
     * @allow create: if request.auth != null;
     * @allow read: if request.auth != null && resource.data.parentUserId == request.auth.uid;
     * @allow update: if request.auth.token.email == "superadmin@gmail.com" && resource != null;
     * @allow delete: if request.auth.token.email == "superadmin@gmail.com" && resource != null;
     * @deny list: if request.auth.token.email != "superadmin@gmail.com";
     * @principle Allows parents to create receipts and super admins to manage them. Enforces document ownership for reads.
     */
    match /receipts/{receiptId} {
      allow create: if request.auth != null;

      // Parent: can read only their own receipts
      allow get: if request.auth != null && request.auth.uid == resource.data.parentUserId;
      allow update: if false;

      // Super admin: can see and update all
      allow list, get, update, delete: if request.auth.token.email == "superadmin@gmail.com";
    }

      /**
     * @description Manages temporary parent credentials.  Write access is restricted.
     * @path /parentCredentials/{userId}
     * @deny get, list, create, update, delete: if false;
     * @principle No access granted to parent credentials
     */
    match /parentCredentials/{userId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages attendance records. Read access is allowed to all authenticated users. Writes are not allowed.
     * @path /attendance/{attendanceId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if false;
     * @principle Allows public read access to attendance records but restricts write access.
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages subject information. Read access is allowed to all authenticated users. Writes are not allowed.
     * @path /subjects/{subjectId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to subject information but restricts write access.
     */
    match /subjects/{subjectId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages term information. Read access is allowed to all authenticated users. Writes are not allowed.
     * @path /terms/{termId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if false;
     * @principle Allows public read access to term information but restricts write access.
     */
    match /terms/{termId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages result data. Read access is allowed to all authenticated users. Writes are not allowed.
     * @path /results/{resultId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if false;
     * @principle Allows public read access to result data but restricts write access.
     */
    match /results/{resultId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

      /**
     * @description Manages notifications for users. Users can only read their own notifications.
     * @path /notifications/{notificationId}
     * @allow get: if resource.data.userId == request.auth.uid;
     * @allow list: if false;
     * @deny create, update, delete: if false;
     */
    match /notifications/{notificationId} {
        allow get: if resource.data.userId == request.auth.uid;
        allow list: if false;
        allow create, update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }
}