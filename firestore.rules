/**
 * @fileoverview Firestore Security Rules for the school management application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It strictly enforces user-based authorization for data modification and restricts listing
 * of sensitive collections.
 *
 * Data Structure:
 * - /branches/{branchId}: Stores information about school branches.
 * - /users/{userId}: Stores user details, including roles (teacher, parent, admin).
 * - /students/{studentId}: Stores student data, with denormalized branchId and parentUserId.
 * - /receipts/{receiptId}: Stores payment receipts, with denormalized studentId, parentUserId, and branchId.
 * - /parentCredentials/{userId}: Stores temporary parent credentials (with TTL).
 * - /attendance/{attendanceId}: Stores student attendance records.
 * - /subjects/{subjectId}: Stores subject information.
 * - /terms/{termId}: Stores school terms.
 * - /results/{resultId}: Stores student results.
 * - /notifications/{notificationId}: Stores user notifications.
 *
 * Key Security Decisions:
 * - Users can only manage their own data in /users/{userId}.
 * - Listing of receipts is denied due to potentially sensitive financial information.
 * - Ownership is strictly enforced for creating, updating, and deleting documents.
 * - The `parentCredentials` collection is secured to prevent unauthorized access to temporary credentials.
 *
 * Denormalization for Authorization:
 * - The rules rely on denormalized fields like `branchId`, `parentUserId`, and `studentId` within documents
 *   to simplify security checks and avoid costly `get()` operations.  For example, receipts include `parentUserId`,
 *   so a user can only manage receipts associated with their user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to branch information.
     * @path /branches/{branchId}
     * @allow (get, list): if true; - Anyone can view branch information.
     * @allow (create, update, delete): if false; - No one can modify branch information through the client.
     * @deny (create, update, delete): Always denied to prevent unauthorized modifications.
     * @principle Public read, no client writes
     */
    match /branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user information.
     * @path /users/{userId}
     * @allow (get): if isSignedIn(); - Any logged-in user can get a user document.
     * @allow (create): if isOwner(userId); - A user can create their own profile.
     * @allow (update, delete): if isExistingOwner(userId); - A user can update or delete their own profile.
     * @deny (create): if !isOwner(userId); - Prevents creating a user document with a mismatched user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to student information.
     * @path /students/{studentId}
     * @allow (get, list): if true; - Public read access for all students.
     * @allow (create): if request.resource.data.createdByUserId == request.auth.uid; - Only the user whose ID matches `createdByUserId` can create a student record.
     * @allow (update, delete): if isExistingOwner(resource.data.createdByUserId); - Only the owner (`createdByUserId`) can update or delete a student.
     * @deny (create): if request.resource.data.id != studentId; - Ensures the `id` field matches the document ID.
     * @principle Public read, owner-only writes, validates relational integrity.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create: if request.resource.data.createdByUserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdByUserId);
      allow delete: if isExistingOwner(resource.data.createdByUserId);
    }

    /**
     * @description Controls access to payment receipt information.
     * @path /receipts/{receiptId}
     * @allow (get): if true; - Public read access to receipts.
     * @allow create: if request.resource.data.parentUserId == request.auth.uid; - The parent creating a receipt must match the authenticated user ID.
     * @allow update: if isExistingOwner(resource.data.parentUserId); - Only the owner can update.
     * @allow delete: if isExistingOwner(resource.data.parentUserId); - Only the owner can delete.
     * @deny list: if true; - No one is allowed to list the receipt documents.
     * @principle Owner-only access for writes, restricts listing to protect financial data.
     */
    match /receipts/{receiptId} {
      allow get: if true;
      allow list: if false;
      allow create: if request.resource.data.parentUserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.parentUserId);
      allow delete: if isExistingOwner(resource.data.parentUserId);
    }

    /**
     * @description Controls access to temporary parent credentials.
     * @path /parentCredentials/{userId}
     * @allow get: if isOwner(userId); - Only the user themselves can access their credential.
     * @allow create: if isOwner(userId); - Only the user can create this document.
     * @allow update: if false; - Updates are disallowed to prevent manipulation.
     * @allow delete: if isExistingOwner(userId); - Owner only can delete.
     * @principle Owner-only access, protects temporary credentials.
     */
    match /parentCredentials/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance records.
     * @path /attendance/{attendanceId}
     * @allow get, list: if true; - Public read access.
     * @allow create: if request.resource.data.markedBy == request.auth.uid; - Only the teacher (markedBy) can create.
     * @allow update: if isExistingOwner(resource.data.markedBy); - Owner only can update.
     * @allow delete: if isExistingOwner(resource.data.markedBy); - Owner only can delete.
     * @principle Owner-only access for writes
     */
    match /attendance/{attendanceId} {
        allow get, list: if true;
        allow create: if request.resource.data.markedBy == request.auth.uid;
        allow update: if isExistingOwner(resource.data.markedBy);
        allow delete: if isExistingOwner(resource.data.markedBy);
    }

    /**
     * @description Controls access to subjects.
     * @path /subjects/{subjectId}
     * @allow get, list: if true; - Public read access
     * @allow create, update, delete: if false; // TODO: Add admin validation if needed.
     * @principle Public read, no client writes
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to terms.
     * @path /terms/{termId}
     * @allow get, list: if true; - Public read access
     * @allow create, update, delete: if false;  // TODO: Add admin validation if needed.
     * @principle Public read, no client writes
     */
    match /terms/{termId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to student results.
     * @path /results/{resultId}
     * @allow get, list: if true; - Public read access.
     * @allow create: if request.resource.data.recordedBy == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.recordedBy);
     * @allow delete: if isExistingOwner(resource.data.recordedBy);
     * @principle Teacher-only access for writes.
     */
    match /results/{resultId} {
      allow get, list: if true;
      allow create: if request.resource.data.recordedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.recordedBy);
      allow delete: if isExistingOwner(resource.data.recordedBy);
    }
    
    /**
     * @description Controls access to notifications.
     * @path /notifications/{notificationId}
     * @allow get: if request.auth.uid == resource.data.userId; - Only the user to whom the notification belongs can read it.
     * @allow list: if request.auth.uid == resource.data.userId; - Only the user to whom the notifications belongs can list them.
     * @allow create: if request.resource.data.userId == request.auth.uid; - A user can create a notification for themselves.
     * @allow update: if isExistingOwner(resource.data.userId); - Owner only can update.
     * @allow delete: if isExistingOwner(resource.data.userId); - Owner only can delete.
     * @principle Owner-only access for notifications.
     */
    match /notifications/{notificationId} {
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if request.auth.uid == resource.data.userId;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }


    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}